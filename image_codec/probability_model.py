class ProbabilityModel:

    LPS_TABLE = [
        [128, 176, 208, 240],
        [128, 167, 197, 227],
        [128, 158, 187, 216],
        [123, 150, 178, 205],
        [116, 142, 169, 195],
        [111, 135, 160, 185],
        [105, 128, 152, 175],
        [100, 122, 144, 166],
        [95, 116, 137, 158],
        [90, 110, 130, 150],
        [85, 104, 123, 142],
        [81, 99, 117, 135],
        [77, 94, 111, 128],
        [73, 89, 105, 122],
        [69, 85, 100, 116],
        [66, 80, 95, 110],
        [62, 76, 90, 104],
        [59, 72, 86, 99],
        [56, 69, 81, 94],
        [53, 65, 77, 89],
        [51, 62, 73, 85],
        [48, 59, 69, 80],
        [46, 56, 66, 76],
        [43, 53, 63, 72],
        [41, 50, 59, 69],
        [39, 48, 56, 65],
        [37, 45, 54, 62],
        [35, 43, 51, 59],
        [33, 41, 48, 56],
        [32, 39, 46, 53],
        [30, 37, 43, 50],
        [29, 35, 41, 48],
        [27, 33, 39, 45],
        [26, 31, 37, 43],
        [24, 30, 35, 41],
        [23, 28, 33, 39],
        [22, 27, 32, 37],
        [21, 26, 30, 35],
        [20, 24, 29, 33],
        [19, 23, 27, 31],
        [18, 22, 26, 30],
        [17, 21, 25, 28],
        [16, 20, 23, 27],
        [15, 19, 22, 25],
        [14, 18, 21, 24],
        [14, 17, 20, 23],
        [13, 16, 19, 22],
        [12, 15, 18, 21],
        [12, 14, 17, 20],
        [11, 14, 16, 19],
        [11, 13, 15, 18],
        [10, 12, 15, 17],
        [10, 12, 14, 16],
        [9, 11, 13, 15],
        [9, 11, 12, 14],
        [8, 10, 12, 14],
        [8, 9, 11, 13],
        [7, 9, 11, 12],
        [7, 9, 10, 12],
        [7, 8, 10, 11],
        [6, 8, 9, 11],
        [6, 7, 9, 10],
        [6, 7, 8, 9],
        [2, 2, 2, 2],
    ]

    RE_NORM_TABLE = [
        6,
        5,
        4,
        4,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
    ]

    NEXT_STATE_MPS = [
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        124,
        125,
        126,
        127,
    ]

    NEXT_STATE_LPS = [
        1,
        0,
        0,
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        8,
        9,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        18,
        19,
        22,
        23,
        22,
        23,
        24,
        25,
        26,
        27,
        26,
        27,
        30,
        31,
        30,
        31,
        32,
        33,
        32,
        33,
        36,
        37,
        36,
        37,
        38,
        39,
        38,
        39,
        42,
        43,
        42,
        43,
        44,
        45,
        44,
        45,
        46,
        47,
        48,
        49,
        48,
        49,
        50,
        51,
        52,
        53,
        52,
        53,
        54,
        55,
        54,
        55,
        56,
        57,
        58,
        59,
        58,
        59,
        60,
        61,
        60,
        61,
        60,
        61,
        62,
        63,
        64,
        65,
        64,
        65,
        66,
        67,
        66,
        67,
        66,
        67,
        68,
        69,
        68,
        69,
        70,
        71,
        70,
        71,
        70,
        71,
        72,
        73,
        72,
        73,
        72,
        73,
        74,
        75,
        74,
        75,
        74,
        75,
        76,
        77,
        76,
        77,
        126,
        127,
    ]

    ENTROPY_BITS = [
        0x07B23,
        0x085F9,
        0x074A0,
        0x08CBC,
        0x06EE4,
        0x09354,
        0x067F4,
        0x09C1B,
        0x060B0,
        0x0A62A,
        0x05A9C,
        0x0AF5B,
        0x0548D,
        0x0B955,
        0x04F56,
        0x0C2A9,
        0x04A87,
        0x0CBF7,
        0x045D6,
        0x0D5C3,
        0x04144,
        0x0E01B,
        0x03D88,
        0x0E937,
        0x039E0,
        0x0F2CD,
        0x03663,
        0x0FC9E,
        0x03347,
        0x10600,
        0x03050,
        0x10F95,
        0x02D4D,
        0x11A02,
        0x02AD3,
        0x12333,
        0x0286E,
        0x12CAD,
        0x02604,
        0x136DF,
        0x02425,
        0x13F48,
        0x021F4,
        0x149C4,
        0x0203E,
        0x1527B,
        0x01E4D,
        0x15D00,
        0x01C99,
        0x166DE,
        0x01B18,
        0x17017,
        0x019A5,
        0x17988,
        0x01841,
        0x18327,
        0x016DF,
        0x18D50,
        0x015D9,
        0x19547,
        0x0147C,
        0x1A083,
        0x0138E,
        0x1A8A3,
        0x01251,
        0x1B418,
        0x01166,
        0x1BD27,
        0x01068,
        0x1C77B,
        0x00F7F,
        0x1D18E,
        0x00EDA,
        0x1D91A,
        0x00E19,
        0x1E254,
        0x00D4F,
        0x1EC9A,
        0x00C90,
        0x1F6E0,
        0x00C01,
        0x1FEF8,
        0x00B5F,
        0x208B1,
        0x00AB6,
        0x21362,
        0x00A15,
        0x21E46,
        0x00988,
        0x2285D,
        0x00934,
        0x22EA8,
        0x008A8,
        0x239B2,
        0x0081D,
        0x24577,
        0x007C9,
        0x24CE6,
        0x00763,
        0x25663,
        0x00710,
        0x25E8F,
        0x006A0,
        0x26A26,
        0x00672,
        0x26F23,
        0x005E8,
        0x27EF8,
        0x005BA,
        0x284B5,
        0x0055E,
        0x29057,
        0x0050C,
        0x29BAB,
        0x004C1,
        0x2A674,
        0x004A7,
        0x2AA5E,
        0x0046F,
        0x2B32F,
        0x0041F,
        0x2C0AD,
        0x003E7,
        0x2CA8D,
        0x003BA,
        0x2D323,
        0x0010C,
        0x3BFBB,
    ]

    def __init__(self):
        self.probability_state: int = 0

    def update_lps(self):
        self.probability_state = self.NEXT_STATE_LPS[self.probability_state]

    def update_mps(self):
        self.probability_state = self.NEXT_STATE_MPS[self.probability_state]

    def estimate_bits(self, binary: int) -> float:
        n_bits: float = 0.000030517578125 * float(
            self.ENTROPY_BITS[self.probability_state ^ binary]
        )
        if binary == self.mps():
            self.probability_state = self.NEXT_STATE_MPS[self.probability_state]
        else:
            self.probability_state = self.NEXT_STATE_LPS[self.probability_state]
        return n_bits

    def state(self) -> int:
        return self.probability_state >> 1

    def mps(self) -> int:
        return self.probability_state & 1
